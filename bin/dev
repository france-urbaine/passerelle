#!/usr/bin/env ruby
# frozen_string_literal: true

# Helpers
# ------------------------------------------------------------------------------
# It's helpful to know what messages came from this script,
# so we'll use log instead of `puts`
LOG_PREFIX = "\e[34m[ bin/ci ]\e[0m"
def log(message)
  puts "#{LOG_PREFIX} #{message}"
end

# We don't want the setup method to have to do all this error checking,
# and we also want to explicitly log what we are executing.
# Thus, we use this method instead of Kernel#system
def system!(*args)
  log "\e[33m#{args.join(' ')}\e[0m"
  return if system(*args)

  log "\e[33m#{args.join(' ')}\e[0m failed"
  abort
end

def command_available?(command)
  system("command -v #{command} &> /dev/null")
end

def process_manager
  @process_manager ||=
    if command_available?("overmind")
      "overmind"
    elsif command_available?("foreman")
      "foreman"
    else
      log "Installing foreman..."
      system!("gem install foreman")
      "foreman"
    end
end

# Overmind & Foreman assigns the port base (5000 by default) to `PORT` for the
# first process and increases `PORT` by port step (100 by default) for each
# subsequent one.
#
# See:
#   https://github.com/ddollar/foreman/blob/master/lib/foreman/engine.rb#L264
#   https://github.com/DarthSim/overmind/blob/master/README.md#specifying-the-ports
#
# However:
#   * the port 3000 is well known to be the default port for Rails server
#   * the port 5000 is already used by the OS since MacOS 12.0.1
#     See: https://github.com/DarthSim/overmind/issues/119
#
# Overmind suggests to set another OVERMIND_PORT but if we override it by default
# here, we cannot then override it on needed.
# So we disabled this behavior with -N option.
#
# Finally, you can override the port used by Rails with the command `PORT=<port> bin/dev`
# or by setting `PORT=<port>` in the `.overmind.env` file.
#
def overmind_options(processes, socket:)
  options = {}
  options[:f] = "Procfile.dev"

  if (processes.empty? || processes.include?(:mailcatcher)) && command_available?("mailcatcher")
    options[:f] = "Procfile.dev+mailcatcher"
  end

  options[:N] = ""
  options[:l] = processes.join(",") if processes.any?
  options[:s] = "./.overmind_#{socket}.sock" if socket
  options
end

def foreman_options(processes, **)
  if processes.empty? && command_available?("mailcatcher")
    log "Mailcatcher is installed but cannot be run with foreman."
    log "You should consider installing overmind."
  elsif processes.include?(:mailcatcher)
    log "Mailcatcher cannot be run with foreman."
    log "You should consider installing overmind."
    exit
  end

  options = {}
  options[:f] = "Procfile.dev"
  options[:p] = ENV.fetch("PORT", 3000) if processes.empty? || processes.include?(:web)
  options[:m] = processes.map { |s| "#{s}=1" }.join(",") if processes.any?
  options
end

# Programs
# ------------------------------------------------------------------------------
def start(*processes, socket: nil)
  command = process_manager
  command += " start "

  options =
    case process_manager
    when "overmind" then overmind_options(processes, socket: socket)
    when "foreman"  then foreman_options(processes)
    end

  command += options.map { |(k, v)| "-#{k} #{v}".strip }.join(" ")

  system!(command)
end

def start_server
  start(:web, :js, :css)
end

def start_sidekiq
  start(:sidekiq, socket: "sidekiq")
end

def start_mailcatcher
  unless command_available?("mailcatcher")
    log "Mailcatcher is not installed or the command is not available"
    exit
  end

  start(:mailcatcher, socket: "mailcatcher")
end

def help
  log "Development commands:"
  log ""
  log "    bin/dev              # Start all default process"
  log "    bin/dev server       # Start only processes to serve the app"
  log "    bin/dev mailcatcher  # Start only mailcatcher in foreground mode"
  log "    bin/dev help         # Show this help"
  log ""
end

# Command parser
# ------------------------------------------------------------------------------
if ARGV[0].nil?
  start
else
  case ARGV[0]
  when "server"      then start_server
  when "sidekiq"     then start_sidekiq
  when "mailcatcher" then start_mailcatcher
  else help
  end
end
