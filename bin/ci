#!/usr/bin/env ruby
# frozen_string_literal: true

# Helpers
# ------------------------------------------------------------------------------
# It's helpful to know what messages came from this script,
# so we'll use log instead of `puts`
LOG_PREFIX = "\e[34m[ bin/ci ]\e[0m"
def log(message)
  puts "#{LOG_PREFIX} #{message}"
end

# We don't want the setup method to have to do all this error checking,
# and we also want to explicitly log what we are executing.
# Thus, we use this method instead of Kernel#system
def system!(*args)
  log "\e[33m#{args.join(' ')}\e[0m"
  return if system(*args)

  log "\e[33m#{args.join(' ')}\e[0m failed"
  abort
end

# CI programs
# ------------------------------------------------------------------------------
def lint_factories
  log "Running FactoryBot linter"
  system!({ "RAILS_ENV" => "test" }, "bundle exec bin/rails factory_bot:lint")
end

@coverage_cleared = false

def clear_coverage
  log "Clear previous coverage results"
  @coverage_cleared = true

  system!("rm -rf coverage/.resultset.json")
end

def test(scope = nil)
  log "Running tests"
  clear_coverage unless @coverage_cleared

  env        = { "SIMPLE_COV_COMMAND" => "bin/ci test" }
  node_total = ENV.fetch("CI_NODE_TOTAL", 1).to_i
  node_index = ENV.fetch("CI_NODE_INDEX", nil)

  if node_total > 1
    command  = "bundle exec parallel_rspec"
    command += " -n #{node_total}"
    command += " --only-group #{node_index}"    if node_index
    command += " --exclude-pattern spec/system" if scope == "unit"
    command += " --pattern spec/system"         if scope == "system"

    env["SIMPLE_COV_COMMAND"] += ":parallel"
  else
    command  = "bundle exec rspec"
    command += " --exclude-pattern 'system/**/*_spec.rb'" if scope == "unit"
    command += " --pattern 'system/**/*_spec.rb'"         if scope == "system"
    command += " --no-profile --format RSpec::Github::Formatter --format progress" if ENV["CI"] == "true"
  end

  env["SIMPLE_COV_COMMAND"] += ":unit"   if scope == "unit"
  env["SIMPLE_COV_COMMAND"] += ":system" if scope == "system"

  if ENV["CI"] == "true"
    env["SIMPLE_COV"] = "false"
    env["SUPER_DIFF"] = "false"
    env["CAPYBARA_MAX_WAIT_TIME"] = "5"
  end

  system!(env, command)
end

def rubocop
  log "Analyzing code issues with Rubocop"

  command = "bundle exec rubocop"
  command += " --server --display-cop-names" unless ENV["CI"] == "true"

  system! command
end

def brakeman
  log "Analyzing code for security vulnerabilities"
  log "Output will be in tmp/brakeman.html, which can be opened in your browser."
  system! "bundle exec brakeman -q -o tmp/brakeman.html"
end

def audit
  log "Analyzing ruby gems for security vulnerabilities"
  system! "bundle exec bundle audit check --update"
end

def watch
  log "Starting Guard"

  env = {}
  env["POSTGRESQL_DATABASE"] = ENV.fetch("POSTGRESQL_DATABASE", "fiscahub_test_watch")
  env["LOG_PATH"]            = ENV.fetch("LOG_PATH", "log/watch.log")
  env["SKIP_ALL_ON_START_WARNING"] = "true"

  system!(env, "bundle exec guard")
end

def run_all
  lint_factories
  clear_coverage
  test("unit")
  test("system")
  rubocop
  brakeman
  audit
  log ""
  log "Completed"
  log ""
end

def help
  log "CI commands:"
  log "------------"
  log ""
  log "  bin/ci"
  log "     # Run all tests and checks as CI would"
  log ""
  log "  bin/ci watch"
  log "     # Watch file changes to run CI checks"
  log ""
  log "  bin/ci <program>"
  log "     # Run only one program from the CI"
  log "     # Available programs are:"
  log "     #  factories          # lint test factories"
  log "     #  test               # run all the test suite"
  log "     #  test:unit          # run non-system tests"
  log "     #  test:system        # run system tests"
  log "     #  rubocop            # analyzing code issues with Rubocop"
  log "     #  brakeman           # analyzing code for security vulnerabilities."
  log "     #  audit              # analyzing ruby gems for security vulnerabilities"
  log ""
  log "  bin/ci help"
  log "     # Show this help"
  log ""
  log "  To run the commands in CI environnement (ex: on Github), use the CI variable:"
  log "     CI=true bin/ci"
  log ""
  log "  To run tests in parallel, use the CI_NODE_TOTAL variable (or add it to your .env.test)"
  log "     CI_NODE_TOTAL=4 bin/ci test"
  log ""
end

if ARGV[0].nil?
  run_all
else
  case ARGV[0]
  when "watch"       then watch
  when "factories"   then lint_factories
  when "test"        then test
  when "test:unit"   then test("unit")
  when "test:system" then test("system")
  when "rubocop"     then rubocop
  when "brakeman"    then brakeman
  when "audit"       then audit
  else help
  end
end
