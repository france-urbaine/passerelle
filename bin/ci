#!/usr/bin/env ruby
# frozen_string_literal: true

# Helpers
# ------------------------------------------------------------------------------
# It's helpful to know what messages came from this script,
# so we'll use log instead of `puts`
LOG_PREFIX = "\e[34m[ bin/ci ]\e[0m"
def log(message)
  puts "#{LOG_PREFIX} #{message}"
end

# We don't want the setup method to have to do all this error checking,
# and we also want to explicitly log what we are executing.
# Thus, we use this method instead of Kernel#system
def system!(*args)
  log "\e[33m#{args.join(' ')}\e[0m"
  return if system(*args)

  log "\e[33m#{args.join(' ')}\e[0m failed"
  abort
end

# Programs
# ------------------------------------------------------------------------------
def lint_factories
  log "Running FactoryBot linter"
  system!({ "RAILS_ENV" => "test" }, "bundle exec bin/rails factory_bot:lint")
end

@coverage_cleared = false

def clear_coverage
  log "Clear previous coverage results"
  @coverage_cleared = true

  system!("rm -rf coverage/.resultset.json")
end

TEST_SCOPES = %w[
  unit
  system
].freeze

def test(scope = nil, paths = [])
  raise ArgumentError, "unknown command `bin/ci test:#{scope}`" unless scope.nil? || TEST_SCOPES.include?(scope)

  log "Running tests"
  clear_coverage unless @coverage_cleared

  begin
    require "dotenv"
    Dotenv.load(".env.test")
  rescue LoadError
    # Dotenv could not be availbale
  end

  env     = test_env(scope)
  command = test_command(scope, paths)

  system!(env, command)
end

def test_env(scope)
  parallel = ENV.fetch("CI_PARALLEL", "false") != "false"

  env = { "SIMPLE_COV_COMMAND" => "bin/ci test" }
  env["SIMPLE_COV_COMMAND"] += ":parallel" if parallel
  env["SIMPLE_COV_COMMAND"] += ":#{scope}" if scope
  env["PARALLEL_TEST_FIRST_IS_1"] = "true" if parallel

  if ENV["CI"] == "true"
    env["SIMPLE_COV"] = "false"
    env["SUPER_DIFF"] = "false"
    env["CAPYBARA_MAX_WAIT_TIME"] = "5"
  end

  env
end

# I cannot make it simpler
# rubocop:disable Metrics/CyclomaticComplexity
# rubocop:disable Metrics/PerceivedComplexity
#
def test_command(scope, paths)
  parallel = ENV.fetch("CI_PARALLEL", "false")
  parallel = false if parallel == "false"

  if parallel
    node_total = ENV.fetch("CI_NODE_TOTAL", nil)
    node_index = ENV.fetch("CI_NODE_INDEX", nil)

    command  = "bundle exec parallel_rspec"
    command  = "bundle exec turbo_tests" if parallel == "turbo_tests" && ENV["CI"] != "true"

    command += " -n #{node_total}"                              if node_total
    command += " --only-group #{node_index}"                    if node_index
    command += " --exclude-pattern spec/system"                 if scope == "unit"
    command += " --pattern spec/system"                         if scope == "system"
    command += " -f Fuubar"                                     if parallel == "turbo_tests" && ENV["CI"] != "true"
    command += " -- -f progress -f RSpec::Github::Formatter --" if parallel && ENV["CI"] == "true"
  else
    command  = "bundle exec rspec"
    command += " --exclude-pattern 'system/**/*_spec.rb'" if scope == "unit"
    command += " --pattern 'system/**/*_spec.rb'"         if scope == "system"
    command += " --no-profile --format RSpec::Github::Formatter --format progress" if ENV["CI"] == "true"
  end

  command += " #{paths.join(' ')}" if paths.any?
  command
end
#
# rubocop:enable Metrics/CyclomaticComplexity
# rubocop:enable Metrics/PerceivedComplexity

def rubocop(paths = [])
  log "Analyzing code issues with Rubocop"

  command = "bundle exec rubocop"
  command += " --server --display-cop-names" unless ENV["CI"] == "true"
  command += " #{paths.join(' ')}" if paths.any?

  system! command
end

def erblint(paths = [])
  log "Lint ERB templates"

  command = "bundle exec erblint"
  command += " --format compact"
  command += paths.empty? ? " --lint-all" : " #{paths.join(' ')}"

  system! command
end

def brakeman
  log "Analyzing code for security vulnerabilities"
  log "Output will be in tmp/brakeman.html, which can be opened in your browser."
  system! "bundle exec brakeman -q -o tmp/brakeman.html"
end

def audit
  log "Analyzing ruby gems for security vulnerabilities"
  system! "bundle exec bundle audit check --update"
end

def watch
  log "Starting Guard"

  env = {}
  env["POSTGRESQL_DATABASE"] = ENV.fetch("POSTGRESQL_DATABASE", "passerelle_test_watch")
  env["LOG_PATH"]            = ENV.fetch("LOG_PATH", "log/watch.log")
  env["SKIP_ALL_ON_START_WARNING"] = "true"

  system!(env, "bundle exec guard")
end

def run_all
  lint_factories
  clear_coverage
  test("unit")
  test("system")
  rubocop
  erblint
  brakeman
  audit
  log ""
  log "Completed"
  log ""
end

def help
  log "CI commands:"
  log ""
  log "    bin/ci               # Run all tests and checks as CI would"
  log "    bin/ci watch         # Run CI checks as code change"
  log "    bin/ci help          # Show this help"
  log ""
  log "You can also run only one program from the CI:"
  log ""
  log "    bin/ci factories     # Lint test factories"
  log "    bin/ci test          # Run all the test suite"
  log "    bin/ci test:unit     # Run non-system tests"
  log "    bin/ci test:system   # Run system tests"
  log "    bin/ci rubocop       # Analyzing code issues with Rubocop"
  log "    bin/ci erb           # Lint ERB templates"
  log "    bin/ci brakeman      # Analyzing code for security vulnerabilities."
  log "    bin/ci audit         # Analyzing ruby gems for security vulnerabilities"
  log ""
  log "To run tests in parallel, add `CI_PARALLEL=true` to your .env.test or call it with the command:"
  log ""
  log "    CI_PARALLEL=true bin/ci test"
  log ""
  log "To run the commands in CI environnement (ex: on Github), use the CI variable:"
  log ""
  log "    CI=true bin/ci"
  log ""
end

# Command parser
# ------------------------------------------------------------------------------
if ARGV[0].nil?
  run_all
else
  case ARGV[0]
  when "watch"          then watch
  when "factories"      then lint_factories
  when /test(?::(.*))?/ then test(Regexp.last_match[1], ARGV[1..])
  when "rubocop"        then rubocop(ARGV[1..])
  when "erb"            then erblint(ARGV[1..])
  when "brakeman"       then brakeman
  when "audit"          then audit
  else help
  end
end
