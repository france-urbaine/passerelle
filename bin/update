#!/usr/bin/env ruby
# frozen_string_literal: true

# Helpers
# ------------------------------------------------------------------------------
# It's helpful to know what messages came from this script,
# so we'll use log instead of `puts`
LOG_PREFIX = "\e[34m[ bin/update ]\e[0m"
def log(message)
  puts "#{LOG_PREFIX} #{message}"
end

# We don't want the setup method to have to do all this error checking,
# and we also want to explicitly log what we are executing.
# Thus, we use this method instead of Kernel#system
def system!(*args, skip_abort: false)
  log "\e[33m#{args.join(' ')}\e[0m"
  return true if system(*args)
  return false if skip_abort

  log "\e[33m#{args.join(' ')}\e[0m failed"
  abort
end

# Prompt user input
def gets
  print "#{LOG_PREFIX} > "
  result = $stdin.gets(chomp: true)
  log ""
  result
end

# Programs
# ------------------------------------------------------------------------------
def update_check
  log "Verifying gem dependencies"
  system! "bundle check || bundle install"

  log "Verifying JS packages"
  system! "yarn"

  log "Verifying submodule"
  system! "git submodule init"
  system! "git submodule update"

  log "Verifying database migration"
  system! "bin/rails db:migrate"
end

def update_bundle
  require "bundler/setup"
  require "bundleup"

  log "Updating gems"

  bundleup = Bundleup::CLI.new([])
  bundleup.run

  log ""
  log "List outdated gems"
  system! "bundle outdated", skip_abort: true

  if bundleup.updated_gems.any?
    log ""
    log "Some gems have been updated."
    log "Would you like to run the CI ? [Yn]"

    if gets == "Y"
      system! "rubocop --stop-server"
      system! "bin/ci"
    elsif bundleup.updated_gems.any? { |gem| gem.include?("rubocop") }
      log "Some rubocop gems have been updated."
      log "Would you like to run rubocop ? [Yn]"

      if gets == "Y"
        system! "rubocop --stop-server"
        system! "bin/ci rubocop"
      end
    end
  end

  return if system!("git diff --quiet Gemfile.lock", skip_abort: true)

  log ""
  log "Gemfile.lock has changed."
  log "Would you like to commit changes to Gemfile.lock ? [Yn]"
  system! "git commit -m \"Update gems dependencies\" -- Gemfile.lock" if gets == "Y"
end

def update_yarn
  log "Updating JS dependencies"
  system! "yarn upgrade-interactive --latest"
  log ""
  log "List outdated JS dependencies"
  system! "yarn outdated", skip_abort: true

  return if system!("git diff --quiet yarn.lock", skip_abort: true)

  if system!("git diff --quiet package.json", skip_abort: true)
    log "yarn.lock has changed."
    log "Would you like to commit changes on yarn.lock ? [Yn]"
    system! "git commit -m \"Update JS dependencies\" -- yarn.lock" if gets == "Y"
  else
    log "yarn.lock & package.json have changed."
    log "Would you like to see changes on package.json ? [Yn]"
    system!("git diff package.json") if gets == "Y"

    log "Would you like to commit changes on yarn.lock & package.json ? [Yn]"
    system! "git commit -m \"Update JS dependencies\" -- package.json yarn.lock" if gets == "Y"
  end
end

def update_icons
  log "Updating Heroicons set"
  system! "git submodule update --remote vendor/submodules/heroicons"
end

def help
  log "Update commands:"
  log ""
  log "    bin/update         # Check for changes on dependencies, submodules and database"
  log "    bin/update bundle  # Update gems through an interactive command"
  log "    bin/update yarn    # Update JS packages through an interactive command"
  log "    bin/update icons   # Update icons sets (heroicons)"
  log "    bin/update help    # Show this help"
  log ""
  log "To add bin/update to your git hooks, run:"
  log ""
  log "    bin/setup githooks"
  log ""
end

# Command parser
# ------------------------------------------------------------------------------
if ARGV[0].nil?
  update_check
else
  case ARGV[0]
  when "bundle" then update_bundle
  when "yarn"   then update_yarn
  when "icons"  then update_icons
  else help
  end
end
