#!/usr/bin/env ruby
# frozen_string_literal: true

raise "Are you crazy ?" if ENV["RAILS_ENV"] == "production" || ENV["DOTENV"] == "production"

# Helpers
# ------------------------------------------------------------------------------
# It's helpful to know what messages came from this script,
# so we'll use log instead of `puts`
LOG_PREFIX = "\e[34m[ bin/setup ]\e[0m"
def log(message)
  puts "#{LOG_PREFIX} #{message}"
end

# We don't want the setup method to have to do all this error checking,
# and we also want to explicitly log what we are executing.
# Thus, we use this method instead of Kernel#system
def system!(*args)
  log "\e[33m#{args.join(' ')}\e[0m"
  return if system(*args)

  log "\e[33m#{args.join(' ')}\e[0m failed"
  abort
end

# Prompt user input
def gets(secret: false)
  print "#{LOG_PREFIX} > "

  result =
    if secret
      require "io/console"
      $stdin.getpass
    else
      $stdin.gets(chomp: true)
    end

  log ""
  result
end

# Do not output message from config/dotenv.rb
ENV["DOTENV_QUIET"] = "true"

# Programs
# ------------------------------------------------------------------------------
def setup
  # Install bundler if it's missing but don't attempt
  # to upgrade already existing version
  #
  # Only do bundle install if the much-faster bundle check
  # indicates we need to
  #
  log "Installing gems"
  system! "gem install bundler --conservative"
  system! "bundle check || bundle install"

  log "Installing JS packages"
  system! "yarn"

  log ""
  log "✓ All dependencies are satisfied."
  log ""

  log "Dropping & recreating the development & test databases"
  system!({ "SETUP_SEED" => "true" }, "bin/rails db:reset")

  log ""
  log "✓ Development database is ready."
  log ""

  setup_test
  setup_submodules

  log "Removing old logs and tempfiles"
  system! "bin/rails log:clear tmp:clear"

  log ""
  log "-------------------------------------------------------------------------------------"
  log "Almost set up, you might find these commands useful to complete your setup:"
  log ""
  log "    bin/setup master_key     # Add the Rails master key"
  log "    bin/setup user           # Create a new user through an interactive command"
  log "    bin/setup territories    # Import all EPCIs and communes from a remote source"
  log "    bin/setup mailcatcher    # Install mailcatcher"
  log ""
  log "Once you're ready, you can start working with the following commands:"
  log ""
  log "    bin/dev                  # Start all process to run the app"
  log "    bin/ci                   # Run all tests and checks as CI would"
  log ""
  log "To get more commands, try:"
  log ""
  log "    bin/setup help"
  log "    bin/dev help"
  log "    bin/ci help"
  log ""
  log "-------------------------------------------------------------------------------------"
end

def setup_master_key
  log "Setup Rails master key"
  log "You can find the key in a Dashlane card:"
  log ""
  log "    \"Applications Master Keys\""
  log ""
  log "Please enter the master key:"
  master_key = gets(secret: true)

  raise "Invalid key" if master_key.empty?

  path = File.expand_path("../config/master.key", __dir__)
  File.open(path, "w") do |f|
    f.puts master_key
  end

  log "All set up & saved at `config/master.key`"
end

def setup_user
  log "Setup user"
  system!({ "SEED_INTERACTIVE_USER" => "true" }, "bin/rails db:seed")
end

def setup_test(subject = nil)
  subjects = [subject] if subject
  subjects ||=
    %w[rspec parallel watch assets].tap do |array|
      array.delete("watch") if ENV["CI"] == "true"
    end

  if subjects.include?("rspec")
    log "Setup test database"
    system!({ "RAILS_ENV" => "test" }, "bin/rails db:test:prepare")
  end

  if subjects.include?("parallel")
    log "Setup test databases for parallel testing"
    system!({ "PARALLEL_TEST_FIRST_IS_1" => "true" }, "bin/rails parallel:prepare")
  end

  if subjects.include?("watch")
    if ENV.include?("POSTGRESQL_DATABASE")
      log "Setup test database for guard testing ignore due to presence of POSTGRESQL_DATABASE"
    else
      log "Setup test database for guard testing"
      system!({ "RAILS_ENV" => "test", "POSTGRESQL_DATABASE" => "fiscahub_test_watch" }, "bin/rails db:test:prepare")
    end
  end

  if subjects.include?("assets")
    # Compile assets in case they were missing.
    # They are required to start the test suite
    log "Compile assets to run system tests"
    system! "yarn build:css"
    system! "yarn build:js"
  end

  log ""
  log "✓ You're ready to launch the CI !"
  log ""
end

def setup_submodules
  log "Update vendorized submodules"
  system! "git submodule init"
  system! "git submodule update"
end

def setup_territories
  log "Import all territories"
  log "This could take a while."
  log ""
  system!({ "SEED_ALL_EPCIS_AND_COMMUNES" => "true" }, "bin/rails db:seed")
end

def setup_mailcatcher
  log "Install mailcatcher"

  return if system("gem install mailcatcher --pre")

  log "Failed to install mailcatcher"

  if system("command -v brew &> /dev/null")
    log "Homebrew detected"
    log "Retry with option: --with-openssl-dir=$(brew --prefix openssl@1.1)"
    return if system("gem install mailcatcher --pre -- --with-openssl-dir=$(brew --prefix openssl@1.1)")

    log "Failed to install mailcatcher"
  end

  log "Read more about potential issues:"
  log " . https://github.com/eventmachine/eventmachine/issues/936"
  log " . https://github.com/sj26/mailcatcher#rvm"
  log " . https://github.com/sj26/mailcatcher#ruby"
end

def help
  log "Setup commands:"
  log ""
  log "    bin/setup                # Run the default setup process"
  log "    bin/setup master_key     # Add the Rails master key"
  log "    bin/setup user           # Create a new user through an interactive command"
  log "    bin/setup territories    # Import all EPCIs and communes from a remote source"
  log "    bin/setup mailcatcher    # Install mailcatcher"
  log "    bin/setup test           # Reset all databases for testing, it also accepts [rspec|parallel|watch|assets]"
  log "    bin/setup submodules     # Get submodules"
  log "    bin/setup help           # Show this help"
  log ""
  log "Here are some other useful commands:"
  log ""
  log "    bin/dev                  # Start all process to run the app"
  log "    bin/ci                   # Run all tests and checks as CI would"
  log ""
  log "To get more commands, try:"
  log ""
  log "    bin/dev help"
  log "    bin/ci help"
  log "    bin/update help"
  log ""
end

# Command parser
# ------------------------------------------------------------------------------
if ARGV[0].nil?
  setup
else
  case ARGV[0]
  when "master_key"   then setup_master_key
  when "user"         then setup_user
  when "territories"  then setup_territories
  when "mailcatcher"  then setup_mailcatcher
  when "test"         then setup_test(ARGV[1])
  when "submodules"   then setup_submodules
  else help
  end
end
