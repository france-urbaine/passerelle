#!/usr/bin/env ruby
# frozen_string_literal: true

# Helpers
# ------------------------------------------------------------------------------
# It's helpful to know what messages came from this script,
# so we'll use log instead of `puts`
LOG_PREFIX = "\e[34m[ bin/setup ]\e[0m"
def log(message)
  puts "#{LOG_PREFIX} #{message}"
end

def gets(secret: false)
  print "#{LOG_PREFIX} "

  if secret
    require "io/console"
    result = $stdin.noecho(&:gets).strip
    puts
    result
  else
    $stdin.gets.strip
  end
end

# We don't want the setup method to have to do all this error checking,
# and we also want to explicitly log what we are executing.
# Thus, we use this method instead of Kernel#system
def system!(*args)
  ENV["DOTENV_QUIET"] = "true"
  return if system(*args)

  args_output = "\e[33m#{args}\e[0m"
  log "#{args_output} failed"
  abort
end

# Setup methods
# ------------------------------------------------------------------------------
def setup
  log "Installing gems"

  # Install bundler it it's missing but don't attempt
  # to upgrade already existing version
  system! "gem install bundler --conservative"

  # Only do bundle install if the much-faster bundle check
  # indicates we need to
  system! "bundle check || bundle install"

  log "Installing JS packages"
  system! "yarn"

  log "Dropping & recreating the development & test databases"
  system!({"SETUP_SEED" => "true" }, "bin/rails db:reset")

  log "Setup test environment for parallel testing"
  system! "bin/rails parallel:prepare"

  log "Compile assets"
  # Compile assets in case they were missing.
  # They are required to start the test suite
  system! "yarn build:css"
  system! "yarn build:js"

  log "Removing old logs and tempfiles"
  system! "bin/rails log:clear tmp:clear"

  log ""
  log "All set up."
  log "Now you're ready to start with these useful commands:"
  useful_commands
end

def setup_master_key
  log "Please enter the master key:"
  master_key = gets(secret: true)

  raise "Invalid key" if master_key.length == 0

  path = File.expand_path("../config/master.key", __dir__)
  File.open(path, "w") do |f|
    f.puts master_key
  end

  log "Key saved at config/master.key"
end

def setup_user
  log "You are about to create a new user."
  log ""
  system!({ "SEED_INTERACTIVE_USER" => "true" }, "bin/rails db:seed")
end

def setup_territories
  log "You are about to import EPCIs and communes from a remote source."
  log "This could take a while."
  log ""
  system!({ "SEED_ALL_EPCIS_AND_COMMUNES" => "true" }, "bin/rails db:seed")
end

def setup_mailcatcher
  log "Install mailcatcher"

  return if system("gem install mailcatcher --pre")

  log "Failed to install mailcatcher"

  if system("command -v brew &> /dev/null")
    log "Homebrew detected"
    log "Retry with option: --with-openssl-dir=$(brew --prefix openssl@1.1)"
    return if system("gem install mailcatcher --pre -- --with-openssl-dir=$(brew --prefix openssl@1.1)")

    log "Failed to install mailcatcher"
  end

  log "Read more about potential issues:"
  log " . https://github.com/eventmachine/eventmachine/issues/936"
  log " . https://github.com/sj26/mailcatcher#rvm"
  log " . https://github.com/sj26/mailcatcher#ruby"
end

def help
  log "Useful commands:"
  useful_commands
end

def useful_commands
  log ""
  log "  bin/setup user"
  log "     # Create an user to access the development server"
  log ""
  log "  bin/setup territories"
  log "     # Import all EPCIs and communes from a remote source"
  log ""
  log "  bin/setup mailcatcher"
  log "     # Install mailcatcher"
  log ""
  log "  bin/dev"
  log "     # Run the app locally"
  log ""
  log "  bin/ci"
  log "     # Runs all tests and checks as CI would"
  log ""
  log "  bin/ci help"
  log "     # Show more options about how to run tests and CI"
  log ""
  log "  bin/setup help"
  log "     # Show this help"
  log ""
  verify_master_key_file
end

def verify_master_key_file
  path = File.expand_path("../config/master.key", __dir__)
  return if File.exist?(path)

  log "---------------------------------------------------------------------------------"
  log "  It seems that the Rails master key is not configured."
  log "  If you have already set it up via another way, you could ignore this message."
  log ""
  log "  Otherwise, you first need to find the key shared in a Dashlane card:"
  log ""
  log "    \"Applications Master Keys\""
  log ""
  log "  Then, you could use the following command to save the key:"
  log ""
  log "    bin/setup master_key"
  log "---------------------------------------------------------------------------------"
  log ""
end

if ARGV[0].nil?
  setup
elsif ARGV[0] == "master_key"
  setup_master_key
elsif ARGV[0] == "user"
  setup_user
elsif ARGV[0] == "territories"
  setup_territories
elsif ARGV[0] == "mailcatcher"
  setup_mailcatcher
else
  help
end
