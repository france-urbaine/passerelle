= content_layout_component(class: "documentation") do |layout|
  - layout.with_breadcrumbs do |breadcrumbs|
    - breadcrumbs.with_path "Guides"
    - breadcrumbs.with_h1 "Transmettre des signalements"

  - layout.with_section do
    = card_component do
      p La transmission de signalements dans l'API s'effectue en plusieurs étapes :

      ol
        li Identifier une collectivité
        li Initialiser une nouvelle transmission.
        li Créer un ou plusieurs signalements dans cette transmission, en autant de requêtes que necessaire.
        li Ajouter une ou plusieurs pièces jointes à ces mêmes signalements.
        li Finaliser la transmission pour l'envoyer aux services fiscaux.

      p Chaque étape est détaillée ci-dessous.

  - layout.with_section do
    = flash_component do
      ' Ce guide utilise une variable <code>$ACCESS_TOKEN</code> suggérée dans
      = link_to "le guide sur le processus d'authentification", api_documentation_path("guides/authentification")
      ' .

  - layout.with_header icon: "code-bracket-square" do
    | Identification de la collectivité

  - layout.with_section do
    = card_component do
      p
        ' Le processus de transmission s'effectue pour une et une seule collectivité à la fois.
        br
        ' Il faut donc au préalable identifier la collectivité en question.

      p
        ' Utilisez la
        ' #{link_to("liste des collectivités", apipie_apipie_path(version: "1.0", resource: :collectivities, method: :index))}
        ' pour obtenir l'ID de la collectivité :

      ruby:
        example = UI::CodeRequestExampleComponent.new "GET", api_collectivities_url,
          json:          true,
          authorization: true,
          request: {
            body: {
              search: "CA du Pays Basque"
            }
          },
          response: {
            body: {
              collectivites: [
                {
                  "id": "9389c859-a9d9-4f2d-b7b4-1a704bf57f6f",
                  "name": "CA du Pays Basque",
                  "siren": "200067106"
                }
              ]
            }
          }

      = render example

      p
        ' Pour la suite de ce guide, vous pouvez assigner l'ID de la collectivité à une variable :

      = tabs_component do |tabs|
        - tabs.with_tab("cURL + jq") do
          = code_example_component(:command, copyable: true) do
            | COLLECTIVITY_ID=$( \
              #{example.curl_command(indent: 2, options: %w[fail])} \
                | jq -r '.collectivites[0].id'
              ) && echo $COLLECTIVITY_ID

        - tabs.with_tab("httpie + jq") do
          = code_example_component(:command, copyable: true) do
            | COLLECTIVITY_ID=$( \
              #{example.httpie_command(indent: 2, options: %w[check-status b])} \
                | jq -r '.collectivites[0].id'
              ) && echo $COLLECTIVITY_ID

  - layout.with_header icon: "code-bracket-square" do
    | Initialisation de la transmission

  - layout.with_section do
    = card_component do
      p
        ' Utilisez l'ID de la collectivité dans l'URL pour
        ' #{link_to("initialiser une transmission", apipie_apipie_path(version: "1.0", resource: :transmissions, method: :create))} :
      p

      ruby:
        example = UI::CodeRequestExampleComponent.new "POST", api_collectivity_transmissions_url("$COLLECTIVITY_ID"),
          json: true,
          authorization: true,
          response: {
            body: {
              "transmission": {
                "id": "7fdfbcee-0afc-44e2-b8e9-bbd359b59958"
              }
            }
          },
          interpolations: {
            COLLECTIVITY_ID: "9389c859-a9d9-4f2d-b7b4-1a704bf57f6f"
          }

      = render example

      p
        ' Pour la suite de ce guide, vous pouvez assigner l'ID de la transmission à une variable :

      = tabs_component do |tabs|
        - tabs.with_tab("cURL + jq") do
          = code_example_component(:command, copyable: true) do
            | TRANSMISSION_ID=$( \
              #{example.curl_command(indent: 2, options: %w[fail])} \
                | jq -r '.transmission.id'
              ) && echo $TRANSMISSION_ID

        - tabs.with_tab("httpie + jq") do
          = code_example_component(:command, copyable: true) do
            | TRANSMISSION_ID=$( \
              #{example.httpie_command(indent: 2, options: %w[check-status b])} \
                | jq -r '.transmission.id'
              ) && echo $TRANSMISSION_ID

  - layout.with_header icon: "code-bracket-square" do
    | Création des signalements

  - layout.with_section do
    = card_component do
      p
        ' Une fois la transmission initialisée, utiliser l'ID de cette nouvelle transmission pour
        ' #{link_to("créer des signalements", apipie_apipie_path(version: "1.0", resource: :reports, method: :create))}.
        br
        ' Vous pouvez créer autant de signalements que nécessaire, en effectuant plusieurs requêtes avec la même transmission.

      ruby:
        example = UI::CodeRequestExampleComponent.new "POST", api_transmission_reports_url("$TRANSMISSION_ID"),
          json: true,
          authorization: true,
          request: {
            body: {
              report: {
                form_type: "creation_local_habitation",
                anomalies: ["omission_batie"],
                priority: "low",
                code_insee: "64019",
                date_constat: "2023-01-02",
                situation_proprietaire: "Doe",
                situation_numero_ordre_proprietaire: "A12345",
                situation_parcelle: "AA 0000",
                situation_numero_voie: "1",
                situation_libelle_voie: "rue de la Liberté",
                situation_code_rivoli: "0000",
                proposition_nature: "AP",
                proposition_categorie: "1",
                proposition_surface_reelle: 70.0,
                proposition_date_achevement: "2023-01-01"
              }
            }
          },
          response:  {
            code: 201,
            body: {
              report: {
                id: "6cbc5022-3bc9-40ce-ab20-b5fef3d88fae"
              }
            }
          },
          interpolations: {
            "TRANSMISSION_ID" => "7fdfbcee-0afc-44e2-b8e9-bbd359b59958"
          }

      = render example

      p
        ' Pour créer un signalement valide, consultez
        = link_to("les règles de validation d'un signalement", api_documentation_path("guides/formulaires"))
        ' .
        br
        ' En cas d'erreurs de validation, la requête vous retournera une liste de message d'erreurs :

      = code_example_component do |code|
        - code.with_language(:http) do
          | HTTP/1.1 422 Unprocessable Entity
            Content-Type: application/json; charset=utf-8

        - code.with_language(:json) do
          | {
              "errors": {
                "code_insee": [
                  "n'est pas valide"
                ],
                "date_constat": [
                  "Ce champs est requis"
                ]
              }
            }

      p
        ' Vous pouvez assigner l'ID du signalement nouvellement créé à une variable pour lui
        = link_to "assigner des pièces jointes", api_documentation_path("guides/transmettre_des_pieces_jointes")
        '  :

      = tabs_component do |tabs|
        - tabs.with_tab("cURL + jq") do
          = code_example_component(:command, copyable: true) do
            | REPORT_ID=$( \
              #{example.curl_command(indent: 2, options: %w[fail])} \
                | jq -r '.report.id'
              ) && echo $REPORT_ID

        - tabs.with_tab("httpie + jq") do
          = code_example_component(:command, copyable: true) do
            | REPORT_ID=$( \
              #{example.httpie_command(indent: 2, options: %w[check-status b])} \
                | jq -r '.report.id'
              ) && echo $REPORT_ID

  - layout.with_header icon: "code-bracket-square" do
    | Finalisation de la transmission

  - layout.with_section do
    = card_component do
      p
        ' Une fois les signalement créés, vous pouvez
        ' #{link_to("finaliser la transmission", apipie_apipie_path(version: "1.0", resource: :transmissions, method: :complete))}.
        br
        ' Lors de la finalisation :
      ul
        li un paquet est créé et transmis à chaque DDFIP destinataire
        li un numéro de reférence unique est attribué à chaque signalement

      p Vous pourrez récupérer, assigner et utiliser ces numéros de reférence dans les échanges futurs avec la DDFIP.

      ruby:
        example = UI::CodeRequestExampleComponent.new "PUT", complete_api_transmission_url("$TRANSMISSION_ID"),
          json: true,
          authorization: true,
          interpolations: {
            "TRANSMISSION_ID" => "7fdfbcee-0afc-44e2-b8e9-bbd359b59958"
          },
          response: {
            body: {
              transmission: {
                id:           "7fdfbcee-0afc-44e2-b8e9-bbd359b59958",
                completed_at: "2023-11-03T14:34:13.706Z",
                packages: [
                  {
                    id:        "82365cfd-46e1-406e-9daa-bd4b0081d827",
                    reference: "2023-11-0001",
                    reports:   [
                      {
                        id:        "a436744c-8c2b-44d7-a590-a5a0f0ced51d",
                        reference: "2023-11-0001-00001"
                      },
                      {
                        id:        "18d7eccc-ef46-448a-a5b3-2d8d63c6b9f2",
                        reference: "2023-11-0001-00002"
                      }
                    ]
                  }
                ]
              }
            }
          }

      = render example
