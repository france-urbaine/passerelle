= dialog_component do |dialog|
  = turbo_frame_tag :modal_form do
    = form_with(model: collectivity) do |form|
      .dialog__header
        h1#dialog-title.dialog__title
          - if collectivity.persisted?
            | Modification de la collectivité
          - else
            | Création d'une nouvelle collectivité

        .dialog__header-toolbar
          = dialog.close_button href: params.fetch(:form_back, collectivities_path)

      .dialog__content
        = form_back_param_input

        = form.block :territory, first: true, autocomplete: territories_path do
          ruby:
            if collectivity.territory
              territory_data = { type: collectivity.territory_type, id: collectivity.territory_id }.to_json
              territory_name = collectivity.territory.qualified_name
            end

            # Do not add required attribute to make this form submittable in noscript mode
            html_options = {
              value:        territory_name,
              placeholder:  "Commnencez à taper pour sélectionner des territoires",
              data:         { autocomplete_target: "input" }
            }

          = form.label :territory
          = form.search_field :territory, **html_options
          = form.hidden_field :territory_data, data: { autocomplete_target: "hidden" }, value: territory_data

        = noscript do
          = form.block :territory_type, first: true do
            ruby:
              models  = [Commune, EPCI, Departement, Region]
              options = models.map { |m| [m.model_name.human, m.name] }

            = form.label :territory_type
            = form.select :territory_type, options, autofocus: true, required: true

          = form.block :territory do
            ruby:
              value = case collectivity.territory
                      when Commune     then collectivity.territory.code_insee
                      when EPCI        then collectivity.territory.siren
                      when Departement then collectivity.territory.code_departement
                      when Region      then collectivity.territory.code_region
                      end

            = form.label :territory_code
            = form.text_field :territory_code, value: value, required: true

        = form.block :publisher_id do
          ruby:
            label   = Collectivity.human_attribute_name(:publisher)
            options = Publisher.all.map { |o| [o.name, o.id ] }

            html_options = {
              prompt:        ("Sélectionnez un éditeur" if collectivity.new_record? && collectivity.errors.empty?),
              include_blank: "Aucun éditeur ou éditeur absent de la liste"
            }

          = form.label :publisher_id, label
          = form.select :publisher_id, options, **html_options

        = form.block :name do
          = form.label :name
          = form.text_field :name, required: true

        = form.block :siren do
          = form.label :siren
          = form.text_field :siren, required: true

        = form.block :contact_first_name do
          = form.label :contact_first_name
          = form.text_field :contact_first_name

        = form.block :contact_last_name do
          = form.label :contact_last_name
          = form.text_field :contact_last_name

        = form.block :contact_email do
          = form.label :contact_email
          = form.email_field :contact_email

        = form.block :contact_phone do
          = form.label :contact_phone
          = form.text_field :contact_phone

      .dialog__actions
        button.button.button--primary( type="submit" ) Enregistrer
        = dialog.cancel_button "Annuler", href: params.fetch(:form_back, collectivities_path)
