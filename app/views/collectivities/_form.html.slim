- modal.with_form(model: collectivity, url: url_for([parent, collectivity])) do
  = hidden_field_tag :redirect, modal.redirection_path

  = fields(model: collectivity) do |form|
    - if allowed_to?(:assign_publisher?, collectivity)
      = form.block :publisher_id do
        ruby:
          label   = Collectivity.human_attribute_name(:publisher)
          options = Publisher.all.map { |o| [o.name, o.id ] }

          html_options = {
            prompt:        ("Sélectionnez un éditeur" if collectivity.new_record? && collectivity.errors.empty?),
            include_blank: "Aucun éditeur ou éditeur absent de la liste"
          }

        = form.label :publisher_id, label
        = form.select :publisher_id, options, **html_options

    = form.block :territory, autocomplete: territories_path do
      ruby:
        if collectivity.territory
          territory_data = { type: collectivity.territory_type, id: collectivity.territory_id }.to_json
          territory_name = collectivity.territory.qualified_name
        end

        # Do not add required attribute to make this form submittable in noscript mode
        html_options = {
          value:        territory_name,
          placeholder:  "Commnencez à taper pour sélectionner des territoires",
          data:         { autocomplete_target: "input" }
        }

      = form.label :territory
      = form.search_field :territory, **html_options
      = form.hidden_field :territory_data, data: { autocomplete_target: "hidden" }, value: territory_data

    = noscript do
      = form.block :territory_type do
        ruby:
          models  = [Commune, EPCI, Departement, Region]
          options = models.map { |m| [m.model_name.human, m.name] }

        = form.label :territory_type
        = form.select :territory_type, options, autofocus: true, required: true

      = form.block :territory do
        ruby:
          value = case collectivity.territory
                  when Commune     then collectivity.territory.code_insee
                  when EPCI        then collectivity.territory.siren
                  when Departement then collectivity.territory.code_departement
                  when Region      then collectivity.territory.code_region
                  end

        = form.label :territory_code
        = form.text_field :territory_code, value: value, required: true

    = form.block :name do
      = form.label :name
      = form.text_field :name, required: true

    = form.block :siren do
      = form.label :siren
      = form.text_field :siren, required: true

    = form.block :contact_first_name do
      = form.label :contact_first_name
      = form.text_field :contact_first_name

    = form.block :contact_last_name do
      = form.label :contact_last_name
      = form.text_field :contact_last_name

    = form.block :contact_email do
      = form.label :contact_email
      = form.email_field :contact_email

    = form.block :contact_phone do
      = form.label :contact_phone
      = form.text_field :contact_phone

    = form.block :allow_2fa_via_email do
      = form.check_box :allow_2fa_via_email
      = form.label :allow_2fa_via_email

      .pl-9.italic
        p
          | L'authentification en 2 facteurs (2FA) est activée pour tous les utilisateurs.
          br
          | Par défaut, la méthode proposée est d'utiliser un autre appareil pour générer des codes de vérification.
          br
          | Vous pouvez autoriser les utilisateurs de cette organisation à recevoir un code de vérification par email.

        strong Attention :
        ul.list-decimal.ml-6
          li Cette méthode ne protégera pas les utilisateurs en cas d'usurpation du compte email.
          li
            | Si vous désactivez cette option alors que des utilisateurs ont déjà sélectionné l'envoi d'un email
            br
            | comme méthode d'authentification, ces utilisateurs ne pourront plus accéder à la plateforme.

- modal.with_submit_action "Enregistrer"
- modal.with_close_action "Annuler"
