= breadcrumbs_component do |breadcrumbs|
  - breadcrumbs.with_path "Territoires"
  - breadcrumbs.with_path "Régions"

div( data-controller="selection" )
  = turbo_frame_tag :index_header, data: { selection_target: "frame" } do
    = render "index_header", regions: regions, pagy: pagy

  = datatable_component(regions) do |datatable|
    - datatable.with_selection
    - datatable.with_actions
    - datatable.with_column(:region,      sort: true, span: 2) { "Région" }
    - datatable.with_column(:communes,       numeric: true) { "Communes" }
    - datatable.with_column(:epcis,          numeric: true) { "EPCI" }
    - datatable.with_column(:departements,   numeric: true) { "Départements" }
    - datatable.with_column(:collectivities, numeric: true) { "Collectivités" }
    - datatable.with_column(:ddfips,         numeric: true) { "DDFIP" }

    - datatable.with_empty_message do
      | Aucune région disponible.

    - datatable.each_row do |row, region|
      - row.with_selection "Sélectionner cette région",
        described_by: :name

      - row.with_action "Modifier cette région",
        icon:  "pencil-square",
        href:  edit_region_path(region, referrer: current_path, redirect: current_path),
        modal: true

      - row.with_column(:region) do |column|
        - column.with_span do
          = region.code_region

        - column.with_span do
          = link_to region_path(region, current_index_back_params), data: { turbo_frame: "_top" } do
            = region.name

      - row.with_column(:communes) do
        = number_with_delimiter(region.communes_count) if region.communes_count.positive?

      - row.with_column(:epcis) do
        = number_with_delimiter(region.epcis_count) if region.epcis_count.positive?

      - row.with_column(:departements) do
        = number_with_delimiter(region.departements_count) if region.departements_count.positive?

      - row.with_column(:collectivities) do
        = number_with_delimiter(region.collectivities_count) if region.collectivities_count.positive?

      - row.with_column(:ddfips) do
        = number_with_delimiter(region.ddfips_count) if region.ddfips_count.positive?
