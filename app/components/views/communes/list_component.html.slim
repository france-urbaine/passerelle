= datatable_component(@communes) do |datatable|
  - datatable.with_search
  - datatable.with_pagination(@pagy, options: !nested?) if @pagy

  - datatable.with_selection do |selection|
    - if allowed_to_remove_all_from_office?
      - selection.with_action "Exclure les communes du guichet", polymorphic_path([:remove_all, @namespace, @parent, :communes]), modal: true

  - datatable.with_column(:name,        sort: true, span: 2)    { "Commune" }       if columns.include?(:name)
  - datatable.with_column(:departement, sort: true, span: 2)    { "Département" }   if columns.include?(:departement)
  - datatable.with_column(:epci,        sort: true, span: 2)    { "EPCI" }          if columns.include?(:epci)
  - datatable.with_column(:collectivities_count, numeric: true) { "Collectivités" } if columns.include?(:collectivities_count)

  - datatable.with_empty_message do
    - if params[:search]
      | Aucune commune ne correspont à votre recherche.
    - else
      | Aucune commune disponible.

  - datatable.each_row do |row, commune|
    - row.with_checkbox "Sélectionner cette commune", described_by: :name, disabled: !allowed_to_remove_all_from_office?

    - if allowed_to_edit?(commune)
      - row.with_action "Modifier cette commune", edit_path(commune), icon: "pencil-square", modal: true

    - if allowed_to_remove_from_office?(commune)
      - row.with_action "Exclure cette commune du guichet", remove_path(commune), icon: "arrow-right-on-rectangle", modal: true

    - row.with_column(:name) do |column|
      - column.with_span do
        = commune.code_insee

      - column.with_span do
        - if allowed_to_show?(commune)
          = link_to commune.name, show_path(commune), data: { turbo_frame: "_top" }
        - else
            = commune.name

    - row.with_column(:departement) do |column|
      - if commune.departement
        - column.with_span do
          = commune.code_departement

        - column.with_span do
          - if allowed_to_show_departement?(commune.departement)
            = link_to commune.departement.name, show_departement_path(commune.departement), data: { turbo_frame: "_top" }
          - else
            = commune.departement.name

    - row.with_column(:epci) do |column|
      - if commune.epci
        - column.with_span do
          = helpers.display_siren(commune.siren_epci)

        - column.with_span do
          - if allowed_to_show_epci?(commune.epci)
            = link_to commune.epci.name, show_epci_path(commune.epci), data: { turbo_frame: "_top" }
          - else
            = commune.epci.name

    - row.with_column(:collectivities_count) do
      = number_with_delimiter(commune.collectivities_count) if commune.collectivities_count.positive?
