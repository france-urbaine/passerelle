= datatable_component(@communes) do |datatable|
  - datatable.with_search
  - datatable.with_pagination(@pagy, options: !nested?) if @pagy

  - datatable.with_selection do |selection|
    - if allow_action_to?(:destroy_all?, Commune)
      - selection.with_action "Exclure les communes du guichet", polymorphic_path([:remove_all, @namespace, @parent, :communes]), modal: true

  - datatable.with_column(:name,        sort: true, span: 2)    { "Commune" }       if columns.include?(:name)
  - datatable.with_column(:departement, sort: true, span: 2)    { "Département" }   if columns.include?(:departement)
  - datatable.with_column(:epci,        sort: true, span: 2)    { "EPCI" }          if columns.include?(:epci)
  - datatable.with_column(:collectivities_count, numeric: true) { "Collectivités" } if columns.include?(:collectivities_count)

  - datatable.with_empty_message do
    - if params[:search]
      | Aucune commune ne correspont à votre recherche.
    - else
      | Aucune commune disponible.

  - datatable.each_row do |row, commune|
    - row.with_checkbox "Sélectionner cette commune", described_by: :name, disabled: !allow_action_to?(:destroy_all?, Commune)

    - if allow_action_to?(:edit?, commune)
      - row.with_action "Modifier cette commune", polymorphic_path([:edit, :territories, commune]), icon: "pencil-square", modal: true

    - if allow_action_to?(:destroy?, commune)
      - row.with_action "Exclure cette commune du guichet", polymorphic_path([:remove, @namespace, @parent, commune]), icon: "arrow-right-on-rectangle", modal: true

    - row.with_column(:name) do |column|
      - column.with_span do
        = commune.code_insee

      - column.with_span do
        = authorized_link_to(commune, namespace: @namespace, parent: @parent)

    - row.with_column(:departement) do |column|
      - if commune.departement
        - column.with_span do
          = commune.code_departement

        - column.with_span do
          = authorized_link_to(commune.departement, namespace: @namespace, parent: @parent)

    - row.with_column(:epci) do |column|
      - if commune.epci
        - column.with_span do
          = helpers.display_siren(commune.siren_epci)

        - column.with_span do
          = authorized_link_to(commune.epci, namespace: @namespace, parent: @parent)

    - row.with_column(:collectivities_count) do
      = number_with_delimiter(commune.collectivities_count) if commune.collectivities_count.positive?
