= datatable_component(@reports) do |datatable|
    - datatable.with_search if @searchable
    - datatable.with_pagination(@pagy, options: !nested?) if @pagy

    - datatable.with_selection do |selection|
      - if allowed_to?(:create?, Package)
        - selection.with_action "Tout regrouper", disabled: true

      - if allowed_to?(:destroy_all?, Report)
        - selection.with_action "Tout supprimer", url_for([:remove_all, @parent, :reports]), modal: true

    - datatable.with_column(:status,   compact: true)                        { "Etat" }                if columns.include?(:status)
    - datatable.with_column(:reference, **(@searchable ? {sort: true} : {})) { "Reference" }           if columns.include?(:reference)
    - datatable.with_column(:package)                                        { "Paquet" }              if columns.include?(:package)
    - datatable.with_column(:collectivity)                                   { "Collectivité" }        if columns.include?(:collectivity)
    - datatable.with_column(:priority, compact: true)                        { "Priorité" }            if columns.include?(:priority)
    / - datatable.with_column(:office)                                         { "Guichet" }             if columns.include?(:office)
    / - datatable.with_column(:workshop)                                       { "Dossier" }             if columns.include?(:workshop)
    - datatable.with_column(:form_type)                                      { "Type de signalement" } if columns.include?(:form_type)
    - datatable.with_column(:anomalies)                                      { "Objet" }               if columns.include?(:anomalies)
    - datatable.with_column(:invariant)                                      { "Invariant" }           if columns.include?(:invariant)
    - datatable.with_column(:adresse)                                        { "Adresse" }             if columns.include?(:adresse)
    - datatable.with_column(:commune)                                        { "Commune" }             if columns.include?(:commune)

    - datatable.with_empty_message do
      - if params[:search]
        | Aucun signalement ne correspont à votre recherche.
      - else
        | Aucun signalement disponible.

    - datatable.each_row do |row, report|
      - if allowed_to?(:create?, Package) || allowed_to?(:destroy_all?, Report)
        - row.with_checkbox "Sélectionner ce signalement", described_by: :name

      - if allowed_to?(:destroy?, report)
        - row.with_action "Supprimer ce signalement", remove_report_path(report), icon: "trash", modal: true

      - row.with_column(:reference) do
        = authorized_link_to report do
          = report.reference

      - row.with_column(:collectivity) do
        = authorized_link_to report.collectivity, scope: :organization do
          = report.collectivity.name

      - row.with_column(:package) do
        = authorized_link_to report.package do
          = report.package.reference

      - row.with_column(:form_type) do
        = t(report.form_type, scope: "enum.report_form_type")

      - row.with_column(:anomalies) do
        = short_list(report.anomalies, humanize: true) { |value| t(value, scope: "enum.anomalies") }

      - row.with_column(:workshop) do
        = report.workshop&.name

      - row.with_column(:invariant) do
        = report.situation_invariant

      - row.with_column(:adresse) do
        - if report.situation_adresse?
          = report.situation_adresse
        - else
          = [report.situation_numero_voie, report.situation_indice_repetition, report.situation_libelle_voie].join(" ").squish

      - row.with_column(:commune) do
        = report.commune&.name

      - row.with_column(:priority) do
        - case report.priority
        - when "low"
          = icon_component("chart-bar", "Priorité basse", class: "low-priority-icon")
          span.tooltip Priorité basse
        - when "medium"
          = icon_component("chart-bar", "Priorité moyenne", class: "medium-priority-icon")
          span.tooltip Priorité moyenne
        - when "high"
          = icon_component("chart-bar", "Priorité haute", class: "high-priority-icon")
          span.tooltip Priorité haute

      - row.with_column(:status) do
        = report_badge(report)
