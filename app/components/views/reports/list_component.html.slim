= datatable_component(@reports) do |datatable|
    - unless @dashboard
      - datatable.with_search
      - datatable.with_pagination(@pagy, options: !nested?) if @pagy

      - datatable.with_selection do |selection|
        - if allowed_to?(:create?, Transmission)
          - selection.with_action "Transmettre", transmissions_path, method: :post, modal: true

        - if allowed_to?(:destroy?, Transmission)
          - selection.with_action "Ne plus transmettre", transmissions_path, method: :delete, modal: true

        - if allowed_to?(:destroy_all?, Report)
          - selection.with_action "Supprimer", url_for([:remove_all, @parent, :reports]), modal: true

    - datatable.with_column(:status, compact: true)                       { "Etat" }                if columns.include?(:status)
    - datatable.with_column(:form_type, sort: !@dashboard)                { "Type de signalement" } if columns.include?(:form_type)
    - datatable.with_column(:invariant, sort: !@dashboard)                { "Invariant" }           if columns.include?(:invariant)
    - datatable.with_column(:adresse,   sort: !@dashboard)                { "Adresse" }             if columns.include?(:adresse)
    - datatable.with_column(:commune,   sort: !@dashboard)                { "Commune" }             if columns.include?(:commune)
    - datatable.with_column(:anomalies)                                   { "Objet" }               if columns.include?(:anomalies)
    - datatable.with_column(:priority,  sort: !@dashboard, compact: true) { "Priorité" }            if columns.include?(:priority)
    - datatable.with_column(:reference, sort: !@dashboard)                { "Reference" }           if columns.include?(:reference)
    - datatable.with_column(:package,   sort: !@dashboard)                { "Paquet" }              if columns.include?(:package)
    - datatable.with_column(:collectivity)                                { "Collectivité" }        if columns.include?(:collectivity)
    - datatable.with_column(:office)                                      { "Guichet" }             if columns.include?(:office)

    / - datatable.with_column(:workshop) { "Dossier" } if columns.include?(:workshop)

    - datatable.with_empty_message do
      - if @dashboard
        | Aucun signalement.
      - elsif params[:search]
        | Aucun signalement ne correspont à votre recherche.
      - else
        | Aucun signalement disponible.

    - datatable.each_row do |row, report|
      - if @dashboard
        - row.with_checkbox "Sélectionner ce signalement", described_by: :name, disabled: true
      - else
        - row.with_checkbox "Sélectionner ce signalement", described_by: :name, disabled: (allowed_to?(:transmit?, Report) || allowed_to?(:destroy_all?, Report))

        - if report.unassigned?
          - if allowed_to?(:assign?, report)
            - row.with_action "Assigner ce signalement", report_assignment_path(report), icon: "check-circle", modal: true
          - if allowed_to?(:deny?, report)
            - row.with_action "Retourner ce signalement", report_denial_path(report), icon: "no-symbol", modal: true

        - elsif report.processing?
          - if allowed_to?(:approve?, report)
            - row.with_action "Approuver ce signalement", report_approval_path(report), icon: "hand-thumb-up", modal: true, method: "patch"
          - if allowed_to?(:reject?, report)
            - row.with_action "Rejeter ce signalement", report_rejection_path(report), icon: "hand-thumb-down", modal: true

        - if allowed_to?(:destroy?, report)
          - row.with_action "Supprimer ce signalement", remove_report_path(report), icon: "trash", modal: true

      - row.with_column(:status) do
        .space-x-4
          = report_badge(report)

          - if report.sandbox?
            = badge_component("Bac à sable", :warning)

      - row.with_column(:form_type) do
        = authorized_link_to report do
          = t(report.form_type, scope: "enum.report_form_type")

      - row.with_column(:invariant) do
        = report.situation_invariant

      - row.with_column(:adresse) do
        - if report.situation_adresse?
          = report.situation_adresse
        - else
          = [report.situation_numero_voie, report.situation_indice_repetition, report.situation_libelle_voie].join(" ").squish

      - row.with_column(:commune) do
        = report.commune&.name

      - row.with_column(:anomalies) do
        = short_list(report.anomalies, humanize: true) { |value| t(value, scope: "enum.anomalies") }

      - row.with_column(:priority) do
        = render Views::Reports::PriorityIconComponent.new(report)

      - row.with_column(:reference) do
        = report.reference

      - row.with_column(:collectivity) do
        = authorized_link_to report.collectivity

      - row.with_column(:office) do
        - if report.assigned?
          = authorized_link_to report.office

      - row.with_column(:package) do
        = authorized_link_to report.package

      - row.with_column(:workshop) do
        = report.workshop&.name
