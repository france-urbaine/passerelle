= datatable_component(@reports) do |datatable|
  - unless @dashboard
    - datatable.with_search
    - datatable.with_pagination(@pagy, options: !nested?) if @pagy

    - datatable.with_selection do |selection|
      - if allowed_to?(:create?, Transmission)
        - selection.with_action "Transmettre", transmissions_path, method: :post, modal: true

      - if allowed_to?(:destroy?, Transmission)
        - selection.with_action "Ne plus transmettre", transmissions_path, method: :delete, modal: true

      - if allowed_to?(:accept?, Report)
        - selection.with_action "Accepter", edit_all_report_acceptances_path, icon: "check-circle", modal: true
      - if allowed_to?(:reject?, Report)
        - selection.with_action "Rejeter", edit_all_report_rejections_path, icon: "no-symbol", modal: true
      - if allowed_to?(:assign?, Report)
        - selection.with_action "Assigner", edit_all_report_assignments_path, icon: "inbox-arrow-down", modal: true
      - if allowed_to?(:confirm?, Report)
        - selection.with_action "Transmettre", edit_all_report_confirmations_path, icon: "paper-airplane", modal: true

      - if allowed_to?(:destroy_all?, Report)
        - selection.with_action "Supprimer", url_for([:remove_all, @parent, :reports]), modal: true

  - datatable.with_column(:state,     sort: !@dashboard, compact: true) { "État" }                if columns.include?(:state)
  - datatable.with_column(:form_type, sort: !@dashboard)                { "Type de signalement" } if columns.include?(:form_type)
  - datatable.with_column(:invariant, sort: !@dashboard)                { "Invariant" }           if columns.include?(:invariant)
  - datatable.with_column(:adresse,   sort: !@dashboard)                { "Adresse" }             if columns.include?(:adresse)
  - datatable.with_column(:commune,   sort: !@dashboard)                { "Commune" }             if columns.include?(:commune)
  - datatable.with_column(:anomalies, sort: !@dashboard)                { "Objet" }               if columns.include?(:anomalies)
  - datatable.with_column(:priority,  sort: !@dashboard, compact: true) { "Priorité" }            if columns.include?(:priority)
  - datatable.with_column(:reference, sort: !@dashboard)                { "Référence" }           if columns.include?(:reference)

  - datatable.with_column(:package, sort: ("reference" unless @dashboard)) { "Paquet" } if columns.include?(:package)

  - datatable.with_column(:collectivity, sort: !@dashboard) { "Collectivité" } if columns.include?(:collectivity)
  - datatable.with_column(:ddfip,        sort: !@dashboard) { "DDFIP" }        if columns.include?(:ddfip)
  - datatable.with_column(:office,       sort: !@dashboard) { "Guichet" }      if columns.include?(:office)

  - date_columns.each do |column|
    - datatable.with_column(column, sort: !@dashboard, numeric: true) { date_label(column) }

  - datatable.with_empty_message do
    - if @dashboard
      | Aucun signalement.
    - elsif params[:search]
      | Aucun signalement ne correspont à votre recherche.
    - else
      | Aucun signalement disponible.

  - datatable.each_row do |row, report|
    - if @dashboard
      - row.with_checkbox "Sélectionner ce signalement", described_by: :name, disabled: true
    - else
      - row.with_checkbox "Sélectionner ce signalement", described_by: :name

    - if report.wait_for_acceptance?
      - if allowed_to?(:accept?, report)
        - row.with_action "Accepter ce signalement", edit_report_acceptance_path(report, ), icon: "check-circle", modal: true
      - if allowed_to?(:reject?, report)
        - row.with_action "Rejeter ce signalement", edit_report_rejection_path(report, ), icon: "no-symbol", modal: true

    - elsif report.wait_for_assignment?
      - if allowed_to?(:assign?, report)
        - row.with_action "Assigner à un guichet", edit_report_assignment_path(report, ), icon: "inbox-arrow-down", modal: true

    - elsif report.wait_for_resolution?
      - if allowed_to?(:resolve?, report)
        - row.with_action "Valider le signalement", edit_report_resolution_path(report, state: "applicable"), icon: "hand-thumb-up", modal: true
        - row.with_action "Récuser le signalement", edit_report_resolution_path(report, state: "inapplicable"), icon: "hand-thumb-down", modal: true

    - elsif report.wait_for_confirmation?
      - if allowed_to?(:confirm?, report)
        - row.with_action "Transmettre la réponse", edit_report_confirmation_path(report), icon: "paper-airplane", modal: true

    - row.with_column(:state) do
      .space-x-4
        = report_status_badge(report)

        - if report.sandbox?
          = badge_component("Bac à sable", :warning)

    - row.with_column(:form_type) do
      = authorized_link_to report do
        = t(report.form_type, scope: "enum.report_form_type")

    - row.with_column(:invariant) do
      = report.situation_invariant

    - row.with_column(:adresse) do
      = report.computed_address

    - row.with_column(:commune) do
      = report.commune&.name

    - row.with_column(:anomalies) do
      = short_list(report.anomalies, humanize: true) { |value| t(value, scope: "enum.anomalies") }

    - row.with_column(:priority) do
      = render Views::Reports::PriorityIcon::Component.new(report)

    - row.with_column(:reference) do
      = report.reference

    - row.with_column(:package) do
      = authorized_link_to report.package

    - row.with_column(:collectivity) do
      = authorized_link_to report.collectivity

    - row.with_column(:ddfip) do
      = authorized_link_to report.ddfip

    - row.with_column(:office) do
      - if report.assigned?
        = authorized_link_to report.office

    - row.with_column(:transmitted_at) do
      = helpers.display_date(report.transmitted_at, format: "%d-%m-%Y")

    - row.with_column(:accepted_at) do
      = helpers.display_date(report.accepted_at, format: "%d-%m-%Y")

    - row.with_column(:assigned_at) do
      = helpers.display_date(report.assigned_at, format: "%d-%m-%Y")

    - row.with_column(:resolved_at) do
      = helpers.display_date(report.resolved_at, format: "%d-%m-%Y")

    - row.with_column(:returned_at) do
      = helpers.display_date(report.returned_at, format: "%d-%m-%Y")
